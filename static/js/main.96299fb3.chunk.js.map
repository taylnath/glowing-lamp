{"version":3,"sources":["components/Square.js","components/Board.js","reportWebVitals.js","index.js"],"names":["Square","props","transitionString","String","transitionTime","style","backgroundColor","width","side","height","textAlign","border","position","left","xPos","top","yPos","padding","transition","onClick","changeColor","mod","m","n","colors","Board","useState","counter","setCounter","currentlyClicking","setCurrentlyClicking","currentInterval","setCurrentInterval","clickingFast","setClickingFast","initialColors","grid","keys","i","j","clicked","count","colorIndex","index","push","squareColors","setColors","key","newSquareColors","forEach","newColorIndex","length","newColor","keepClicking","clearInterval","interval","setInterval","newIndices","Array","filter","Math","max","floor","random","thisKey","e","console","log","squares","map","margin","float","clear","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96299fb3.chunk.js","sourcesContent":["\n// square component\nfunction Square(props) {\n  // side length (in pixels)\n  let side = 60;\n  // string for transition\n  let transitionString = `background-color ${String(props.transitionTime)}s ease-in-out`;\n\n  return (\n    <div \n      style={{\n        backgroundColor: props.backgroundColor,\n        width: `${side - 22}px`,\n        height: `${side - 22}px`,\n        textAlign:\"center\",\n        border: \"2px solid black\",\n        position: \"absolute\",\n        left: `${props.xPos * 60}px`,\n        top: `${props.yPos * 60}px`,\n        padding: \"10px\",\n        transition: transitionString\n      }}\n      onClick={props.changeColor}\n    >\n    </div>\n  );\n}\n\nexport default Square","import {useState} from 'react';\nimport Square from './Square'\n\n// modulo function so for example mod(-1, 2) = 1 instead of -1 % 2 = -1.\nfunction mod(m, n) {\n  return ((m % n) + n) % n;\n} \n\n// colors to use\nlet colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\"]\n\n// component to combine all the squares together\nfunction Board() {\n  // define state variables\n  const [counter, setCounter] = useState(1);                          // counter to set up squares with different intervals\n  const [currentlyClicking, setCurrentlyClicking] = useState(false);  // is the board auto-clicking?\n  const [currentInterval, setCurrentInterval] = useState(\"\");         // stores the interval key if currently clicking\n  const [clickingFast, setClickingFast] = useState(false);            // is the board auto-clicking quickly?\n\n  // initial color object and grid list \n  // -- grid may not be necessary, I just use it to look up keys\n  const initialColors = {};\n  const grid = [];\n  const keys = [];\n  for (let i = 0; i < 5; i++){\n    for (let j = 0; j < 5; j++){\n      initialColors[String(i) + String(j)] = {\n        backgroundColor: \"\",\n        clicked: false,\n        count: counter,\n        colorIndex: -1,\n        index: -1 // debug\n      };\n      grid.push([i, j]);\n      keys.push(String(i) + String(j));\n    }\n  };\n  // initial color object (all colors blank)\n  let [squareColors, setColors] = useState(initialColors);\n\n  // change the color of a square to the next in line color\n  function changeColor (key){\n    // callback function for the onClick event:\n    return function (){\n      // get the current state\n      let newSquareColors = {...squareColors};\n\n      // update square as clicked, and initialize count parameter\n      if (!squareColors[key].clicked){\n        newSquareColors[key].count = counter;\n        newSquareColors[key].clicked = true;\n        setCounter(counter + 1);\n      }\n\n      // update each square's color if it's been clicked\n      keys.forEach(key => {\n        if (newSquareColors[key].clicked){\n          // add the count to the current index (mod color length)\n          let newColorIndex = mod(newSquareColors[key].colorIndex + newSquareColors[key].count, colors.length);\n          // make sure the color will change, so we don't get fixed points\n          if (newColorIndex === newSquareColors[key].colorIndex){\n            newColorIndex = mod(newColorIndex + 1, colors.length);\n          }\n          // look up new color, set new index and color values\n          let newColor = colors[newColorIndex];\n          newSquareColors[key].backgroundColor = newColor;\n          newSquareColors[key].colorIndex = newColorIndex;\n        }\n      });\n      // update state with new values (this can't go in a loop since it's asynchronous or something)\n      setColors(newSquareColors);\n    }\n  };\n\n  // auto clicker -- clicks on random squares every second\n  function keepClicking() {\n    // clear old state variables\n    setClickingFast(false);\n    clearInterval(currentInterval);\n\n    // click every second\n    let interval = setInterval(() => {\n      // choose a random square from the remaining un-clicked squares, or the first square\n      let indices = [...Array(keys.length).keys()];\n      let newIndices = indices.filter(i => !squareColors[keys[i]].clicked);\n      let index = Math.max(0, Math.floor(Math.random() * (newIndices.length - 1)));\n      let thisKey = keys[newIndices[index]] || keys[0];\n      // the index was getting messed up, so it's in a try/catch for debugging. \n      // not necessary anymore\n      try {\n        changeColor(thisKey)();\n      } catch (e) {\n        console.log('bad index?');\n        console.log(index);\n      }\n    }, 1000);\n    // update state\n    setCurrentlyClicking(true);\n    setCurrentInterval(interval);\n  };\n\n  // stop either auto-clickers\n  function stopClicking () {\n    clearInterval(currentInterval);\n    setCurrentlyClicking(false);\n    setCurrentInterval(\"\");\n  }\n\n  // fast auto-clicker\n  let clickFaster = function () {\n    // clear old state\n    setClickingFast(true);\n    clearInterval(currentInterval);\n\n    // click every 1/10 of a second\n    let interval = setInterval(() => {\n      // choose random square that hasn't been clicked, or the first square\n      let indices = [...Array(keys.length).keys()];\n      let newIndices = indices.filter(i => !squareColors[keys[i]].clicked);\n      let index = Math.max(0, Math.floor(Math.random() * (newIndices.length - 1)));\n      let thisKey = keys[newIndices[index]] || keys[0];\n      // debug try/catch\n      try {\n        changeColor(thisKey)();\n      } catch (e) {\n        console.log('bad index?');\n        console.log(index);\n      }\n    }, 100);\n    // update state\n    setCurrentlyClicking(true);\n    setCurrentInterval(interval);\n  }\n\n  // reset both auto-clickers and board\n  function reset () {\n    setCurrentlyClicking(false);\n    setCounter(1);\n    clearInterval(currentInterval);\n    setCurrentInterval(\"\");\n    setClickingFast(false);\n    setColors(initialColors);\n  }\n\n  // form square grid \n  // TODO: make this a flex box instead of absolutely positioning squares\n  // TODO: use Object.keys(squareColors) instead of grid? \n  let squares = grid.map(([i, j]) => {\n    let key = String(i) + String(j);\n    return (\n      <Square \n        key={key}\n        backgroundColor={squareColors[key].backgroundColor}\n        xPos={i} \n        yPos={j} \n        changeColor={changeColor(key)}\n        transitionTime={clickingFast ? 0.1 : 0.5}\n      />\n    );\n  });\n\n  return (\n    <div> {/* wrapper div since JSX wants one element only */}\n      {/* div just for squares */}\n      <div style={{\n        position: \"absolute\",\n        top: \"calc(50% - 180px)\",\n        left: \"calc(50% - 180px)\"\n      }}>\n        {squares}\n      </div>\n      {/* button div */}\n      <div style={{margin: \"100px\"}}>\n        <button \n          onClick={currentlyClicking ? stopClicking : keepClicking} \n          style={{float:\"right\", clear:\"left\"}}\n        >\n          {currentlyClicking ? \"stop clicking\" : \"auto click\"}\n        </button>\n        <button \n          onClick={clickingFast ? keepClicking : clickFaster}\n          style={{float:\"right\", clear:\"both\"}}\n        >\n          {clickingFast ? \"click slower\" : \"click faster\"}\n        </button>\n        <button \n          onClick={reset}\n          style={{float:\"right\", clear:\"both\"}}\n        >\n          reset\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default Board;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/Board';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
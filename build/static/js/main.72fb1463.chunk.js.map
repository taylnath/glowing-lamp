{"version":3,"sources":["components/Square.js","components/Board.js","reportWebVitals.js","index.js"],"names":["Square","props","side","style","backgroundColor","width","height","textAlign","border","position","left","xPos","top","yPos","padding","transition","onClick","changeColor","text","mod","m","n","Board","colors","useState","counter","setCounter","initialColors","grid","keys","i","j","String","clicked","count","colorIndex","index","push","squareColors","setColors","key","newSquareColors","forEach","newColorIndex","length","newColor","squares","map","setInterval","console","log","newIndices","Array","filter","Math","max","floor","random","thisKey","e","float","clear","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72fb1463.chunk.js","sourcesContent":["\nfunction Square(props) {\n  let side = props.side;\n  return (\n    <div \n      style={{\n        backgroundColor: props.backgroundColor,\n        width: `${side - 22}px`,\n        height: `${side - 22}px`,\n        textAlign:\"center\",\n        border: \"2px solid black\",\n        position: \"absolute\",\n        left: `${props.xPos}px`,\n        top: `${props.yPos}px`,\n        padding: \"10px\",\n        transition: \"background-color 0.5s ease-in-out\"\n      }}\n      onClick={props.changeColor}\n    >\n      {props.text} \n    </div>\n  );\n}\n\nexport default Square","import {useState} from 'react';\nimport Square from './Square'\n\nfunction mod(m, n) {\n  return ((m % n) + n) % n;\n} \n\nfunction Board() {\n  let colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\"]\n  let [counter, setCounter] = useState(1);\n  let initialColors = {};\n  let grid = [];\n  let keys = [];\n  for (let i = 0; i < 5; i++){\n    for (let j = 0; j < 5; j++){\n      initialColors[String(i) + String(j)] = {\n        backgroundColor: \"\",\n        clicked: false,\n        count: counter,\n        colorIndex: -1,\n        index: -1\n      };\n      grid.push([i, j]);\n      keys.push(String(i) + String(j));\n    }\n  };\n  let [squareColors, setColors] = useState(initialColors);\n  let changeColor = function (key){\n    return function (){\n      let newSquareColors = {...squareColors};\n      if (!squareColors[key].clicked){\n        newSquareColors[key].count = counter;\n        newSquareColors[key].clicked = true;\n        setCounter(counter + 1);\n      }\n      keys.forEach(key => {\n        if (newSquareColors[key].clicked){\n          let newColorIndex = mod(newSquareColors[key].colorIndex + newSquareColors[key].count, colors.length);\n          if (newColorIndex === newSquareColors[key].colorIndex){\n            newColorIndex = mod(newColorIndex + 1, colors.length);\n          }\n          let newColor = colors[newColorIndex];\n          newSquareColors[key].backgroundColor = newColor;\n          newSquareColors[key].colorIndex = newColorIndex;\n        }\n      });\n      setColors(newSquareColors);\n    }\n  };\n\n  let keepClicking = function() {\n    // let index = Math.floor(Math.random())\n    setInterval(() => {\n      console.log('bleah');\n      let indices = [...Array(keys.length).keys()];\n      let newIndices = indices.filter(i => !squareColors[keys[i]].clicked);\n      let index = Math.max(0, Math.floor(Math.random() * (newIndices.length - 1)));\n      let thisKey = keys[newIndices[index]] || keys[0];\n      try {\n        changeColor(thisKey)();\n      } catch (e) {\n        console.log('bad index?');\n        console.log(index);\n      }\n    }, 1000);\n  };\n\n  let side = 60;\n  // let side = 30;\n  let squares = grid.map(([i, j]) => {\n    let key = String(i) + String(j);\n    // let text = `${String(squareColors[key].count)} (${squareColors[key].colorIndex} ${squareColors[key].index})`\n    return (\n      <Square \n        key={key}\n        backgroundColor={squareColors[key].backgroundColor}\n        xPos={i*side} \n        yPos={j*side} \n        side={side}\n        changeColor={changeColor(key)}\n        // text={text}\n        text=\"\"\n      />\n    );\n  });\n\n  return (\n    <div>\n      {squares}\n     {/* <button onClick={setAllClicked} style={{float:\"right\", clear:\"left\"}}>Click all {counter} </button> */}\n     <button onClick={keepClicking} style={{float:\"right\", clear:\"left\"}}>keep clicking</button>\n</div>\n  )\n}\n\nexport default Board;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/Board';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}